{
    "beginner": {
        "guidance": "**Beginner-Specific Guidance:** - Focus on explaining basic programming concepts and syntax - Break down complex problems into smaller, manageable steps - Provide clear examples and analogies - Explain common beginner mistakes and how to avoid them - Use simple, non-technical language when possible - Reinforce fundamental programming concepts",
        "context": "For beginners, prioritize clarity and simplicity in explanations. Break down concepts into very small, digestible pieces. Give them the correct Syntax even if it gives away the answer."
    },
    "intermediate": {
        "guidance": "**Intermediate-Specific Guidance:** - Focus on code structure and best practices - Discuss optimization techniques and trade-offs - Explain more advanced programming concepts - Provide insights into algorithm design - Encourage thinking about edge cases and error handling - Discuss code maintainability and readability",
        "context": "For intermediate users, focus on building good programming habits and understanding more complex concepts."
    },
    "advanced": {
        "guidance": "**Advanced-Specific Guidance:** - Focus on high-level design patterns and architecture - Discuss performance optimization and scalability - Explore advanced algorithms and data structures - Encourage thinking about system design - Discuss trade-offs between different approaches - Provide insights into industry best practices",
        "context": "For advanced users, focus on optimization, scalability, and industry best practices."
    }
}